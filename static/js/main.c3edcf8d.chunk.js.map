{"version":3,"sources":["components/Helpers/Helpers.tsx","components/Room/Room.tsx","components/Timer/Timer.tsx","components/Quiz/Quiz.tsx","components/Loader/Loader.tsx","components/Result/Result.tsx","components/Rejected/Rejected.tsx","components/Username/Username.tsx","components/QuizOptions/QuizOptions.tsx","components/JoinRequest/JoinRequest.tsx","components/Participant/Participant.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ComponentType","Room","props","socket","startQuiz","bind","this","send","JSON","stringify","roomID","console","log","copyText","document","querySelector","setAttribute","select","execCommand","isOwner","className","participants","id","value","roomId","type","spellCheck","onClick","copyToClipboard","requests","React","Component","Timer","countDownTimer","quizDuration","startTime","refreshId","setInterval","answerSubmited","endQuiz","clearInterval","timerElement","forceUpdate","toString","substr","Quiz","questionIndex","durationPerQuestion","answersSelected","Array","questionAndAnswers","length","fill","answerChoice","nextQuestion","wrongAnswerClicked","correctAnswerClicked","newTimerValue","setActiveComponent","Result","patLoad","RoomID","ID","user","Answers","TimeTaken","ret","from","map","ch","correctAnsIndex","Math","random","splice","Loader","color","height","width","userScore","results","i","userName","pos","leaderBoardElements","Rejected","Username","submitUsername","newUsername","setUsername","QuizOptions","stopLoader","createRoom","joinRoom","createRoomPayload","OwnerID","setOwner","joinRequest","UserID","name","JoinRequest","showRequest","reqInfo","acceptRequest","rejectReqeuest","App","WebSocket","isLoading","activeComponent","notificationRequests","hash","Date","now","owner","startLoader","setOwnerStatus","ac","ownerStatus","onopen","onmessage","msg","respJson","parse","undefined","push","participant","onclose","componentToRender","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3edcf8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nenum ComponentType {\r\n\tUsername,\r\n\tQuizOptions,\r\n\tLoader,\r\n\tRoom,\r\n\tQuiz,\r\n\tResult,\r\n\tRejected\r\n}\r\n\r\nexport default ComponentType;","import React from 'react';\r\nimport \"./Room.scss\";\r\nimport ComponentType from \"../Helpers/Helpers\";\r\nimport socketInterface from \"../Interfaces/Interfaces\";\r\n\r\ninterface roomInterface extends socketInterface {\r\n    requests: any[],\r\n    isOwner: boolean,\r\n    roomID: string,\r\n    participants: any[]\r\n}\r\n\r\nclass Room extends React.Component<roomInterface> {\r\n\r\n    socket = this.props.socket;\r\n\r\n\tconstructor(props: any) {\r\n        super(props);\r\n        this.startQuiz = this.startQuiz.bind(this);\r\n    }\r\n    \r\n    startQuiz() {\r\n        this.socket.send('\"startQuiz\"-'+JSON.stringify(this.props.roomID));\r\n        console.log(\"Start game request sent\");\r\n    }\r\n\r\n    // copyToClipboard\r\n    copyToClipboard() {\r\n        let copyText = document.querySelector(\".room-id-text\") as HTMLInputElement;\r\n        copyText.setAttribute(\"style\", \"background-color: rgba(146, 226, 173, 0.45);\");\r\n        copyText.select();\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isOwner) return(\r\n            \r\n            <div className=\"room\">\r\n            <div className=\"room-components\">\r\n                <div className=\"room-name\">\r\n                    <p>Your Quiz Room</p>\r\n                </div>\r\n                <div className=\"not-owner-div\">\r\n                    <div className=\"room-info-element\">\r\n                        <div className=\"participants-name\">\r\n                            <p>Participants</p>\r\n                        </div>\r\n                        <div className=\"participants\">\r\n                            {this.props.participants}\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n        return(\r\n            <div className=\"room\">\r\n                <div className=\"room-components\">\r\n                    <div className=\"room-name\">\r\n                        <p>Your Quiz Room</p>\r\n                    </div>\r\n                    <div className=\"room-info\">\r\n                        <div className=\"room-info-element\">\r\n                            <div className=\"participants-name\">\r\n                                <p>Participants</p>\r\n                            </div>\r\n                            <div className=\"participants\">\r\n                                {this.props.participants}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"vertical-separator\"></div>\r\n                        <div className=\"room-info-element\" id=\"game-settings\">\r\n                            <div className=\"sharable-room-id\">\r\n                                <div className=\"share-code-content\">\r\n                                    <div>\r\n                                        <p>Share code</p>\r\n                                    </div>  \r\n                                    <input className=\"room-id-text\" value={this.props.roomId} type=\"Text\" spellCheck=\"false\"/>\r\n                                </div>\r\n                                <div className=\"copy-code-button-div\">\r\n                                    <div className=\"copy-code-button\" onClick={this.copyToClipboard}>\r\n                                        Copy\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"quiz-buttons-div\"> \r\n                                <div className=\"start-game-button\" onClick={this.startQuiz}>\r\n                                    <p>Start Quiz</p>\r\n                                </div>\r\n                                <div className=\"quit-game-button\">\r\n                                    <p>Quit</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"requests-div\">\r\n                                <div className=\"requests-name\">\r\n                                    Join Reqeusts\r\n                                </div>\r\n                                <div className=\"join-user-requests\">\r\n                                    {this.props.requests}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Room;","import \"./Timer.css\";\r\nimport React from 'react';\r\n\r\ninterface timerInterface {\r\n    quizDuration: number,\r\n    endQuiz: (newTimerValue: number)=>void,\r\n    answerSubmited: ()=>boolean\r\n}\r\n\r\nclass Timer extends React.Component<timerInterface> {\r\n    countDownTimer = this.props.quizDuration*200\r\n    startTime = this.countDownTimer\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let refreshId = setInterval(()=>{\r\n            this.countDownTimer -= 1\r\n            if (this.countDownTimer == 0 || this.props.answerSubmited()) {\r\n                this.props.endQuiz((this.startTime-this.countDownTimer)/200);\r\n                clearInterval(refreshId);\r\n            } else if (this.countDownTimer == 10) {\r\n                let timerElement = document.querySelector(\".timer-countdown-div\");\r\n                timerElement?.setAttribute(\"style\", \"color: red;\")\r\n            }\r\n            this.forceUpdate();\r\n        }, 5)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                <div className=\"timer-countdown-div\">{(this.countDownTimer/200).toString().substr(0, 2)}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import \"./Quiz.scss\";\r\nimport React from 'react';\r\nimport { getJSDocReturnTag, NewLineKind } from \"typescript\";\r\nimport QuizOptions from '../QuizOptions/QuizOptions';\r\nimport socketInterface from \"../Interfaces/Interfaces\";\r\nimport ComponentType from \"../Helpers/Helpers\";\r\nimport Timer from \"../Timer/Timer\";\r\n\r\ninterface quizInterface extends socketInterface {\r\n    questionAndAnswers: any,\r\n}\r\n\r\nclass Quiz extends React.Component<quizInterface> {\r\n\r\n    questionIndex = 0;\r\n    durationPerQuestion = 10; //seconds\r\n    answersSelected: number[] = new Array(this.props.questionAndAnswers.length).fill(0);\r\n\r\n\tconstructor(props: any) {\r\n        super(props);\r\n        this.endQuiz = this.endQuiz.bind(this);\r\n        this.answerChoice = this.answerChoice.bind(this);\r\n        this.nextQuestion = this.nextQuestion.bind(this);\r\n        this.answerSubmited = this.answerSubmited.bind(this);\r\n        this.wrongAnswerClicked = this.wrongAnswerClicked.bind(this);\r\n        this.correctAnswerClicked = this.correctAnswerClicked.bind(this);\r\n    }\r\n\r\n    nextQuestion() {\r\n        if (this.answerSubmited()) {\r\n            return ;\r\n        }\r\n        this.questionIndex += 1;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    wrongAnswerClicked() {\r\n        this.answersSelected[this.questionIndex] = 0\r\n        this.nextQuestion();\r\n    }\r\n\r\n    correctAnswerClicked() {\r\n        this.answersSelected[this.questionIndex] = 1\r\n        this.nextQuestion();\r\n    }\r\n\r\n    answerSubmited() {\r\n        return (this.questionIndex == this.props.questionAndAnswers.length);\r\n    }\r\n\r\n    endQuiz(newTimerValue: number) {\r\n        this.props.setActiveComponent(ComponentType.Result);\r\n        let patLoad = {\r\n            RoomID: this.props.roomId,\r\n            ID: this.props.user,\r\n            Answers: this.answersSelected,\r\n            TimeTaken: newTimerValue\r\n        }\r\n        this.props.socket.send('\"quizAnswers\"-'+JSON.stringify(patLoad));\r\n        this.forceUpdate();\r\n        console.log(this.answersSelected);\r\n    }\r\n\r\n    answerChoice() {\r\n        let ret = Array.from(this.props.questionAndAnswers[this.questionIndex][\"Incorrect_Answers\"]).map((ch: any)=>{\r\n            return <div className=\"answer-select-button\" id=\"wrong-answer\" onClick={this.wrongAnswerClicked}>{ch}</div>;\r\n        })\r\n        let correctAnsIndex = 3 * Math.random() | 0;\r\n        ret.splice(correctAnsIndex, 0, <div className=\"answer-select-button\" id=\"correct-answer\" onClick={this.correctAnswerClicked}>{this.props.questionAndAnswers[this.questionIndex][\"Correct_Answer\"]}</div>)\r\n        return ret;\r\n    }  \r\n    \r\n    render() {\r\n        if (this.answerSubmited()) return(<div></div>);\r\n        return(\r\n            <div className=\"quiz-main\">\r\n                <Timer quizDuration={this.durationPerQuestion*this.props.questionAndAnswers.length} \r\n                        answerSubmited={this.answerSubmited} endQuiz={this.endQuiz}/>\r\n                <div className=\"quiz-componenet\">\r\n                    <div className=\"quiz-question\">\r\n                        <div className=\"quiz-progress\">Question {this.questionIndex+1}/{this.props.questionAndAnswers.length}</div>\r\n                        <div className=\"question-string\">{this.props.questionAndAnswers[this.questionIndex][\"Question\"]}</div>\r\n                    </div>\r\n                    <div className=\"vertical-separator\"></div>\r\n                    <div className=\"quiz-select-answers\">\r\n                        {this.answerChoice()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport \"./Loader.css\";\r\nimport DefaultLoader from 'react-loader-spinner';\r\n\r\nclass Loader extends React.Component {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"loader\">\r\n                <DefaultLoader\r\n                    type=\"Watch\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    // timeout={3000} //3 secs\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport { formatDiagnosticsWithColorAndContext } from 'typescript';\r\nimport \"./Result.css\";\r\n\r\ninterface resultInterface {\r\n    results: any,\r\n    userName: string\r\n}\r\n\r\n\r\nclass Result extends React.Component<resultInterface> {\r\n\r\n    user: any = {}\r\n\r\n\tconstructor(props: any) {\r\n        super(props);\r\n        this.userScore = this.userScore.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.userScore();\r\n    }\r\n\r\n    userScore() {\r\n        console.log(this.props.results.length);\r\n        for (let i=0; i<this.props.results.length;i++) {\r\n            if (this.props.results[i][\"ID\"] == this.props.userName) {\r\n                this.user = this.props.results[i];\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    leaderBoardElements() {\r\n        let pos = 0;\r\n        return Array.from(this.props.results).map((user:any)=>{\r\n            pos++\r\n            if (user == this.user) {\r\n                return <div className=\"leader-board-item\">\r\n                            <div className=\"leader-board-pos\">{pos}</div>\r\n                            <div className=\"username-current-user\">{user[\"ID\"]}</div>\r\n                        </div>\r\n            } else {\r\n                return <div className=\"leader-board-item\">\r\n                            <div className=\"leader-board-pos\">{pos}</div>\r\n                            <div className=\"username\">{user[\"ID\"]}</div>\r\n                        </div>\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"results-div\">\r\n                <div className=\"result-info\">\r\n                    <div className=\"result-name\">\r\n                        <p>Quiz Results</p>\r\n                    </div>\r\n                    <div className=\"results-detailed-info\">\r\n                        <div className=\"user-results\">\r\n                            <div className=\"user-result-metric\" id=\"user-score\">\r\n                                <div className=\"user-result-value\">\r\n                                    {this.user[\"Score\"]}\r\n                                </div>\r\n                                <div className=\"user-result-text\">\r\n                                    Score\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-result-metric\" id=\"user-time\">\r\n                                <div className=\"user-result-value\">\r\n                                    {this.user[\"TimeTaken\"]}\r\n                                </div>\r\n                                <div className=\"user-result-text\">\r\n                                    Time (sec)\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-result-metric\" id=\"user-accuracy\">\r\n                                <div className=\"user-result-value\">\r\n                                    {((this.user[\"Score\"]/this.user[\"NoOfQuestions\"])*100).toString()+\"%\"}\r\n                                </div>\r\n                                <div className=\"user-result-text\">\r\n                                    Accuracy\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"vertical-separator-green\"></div>\r\n                        <div className=\"participants-results\">\r\n                            <div className=\"leader-board-name\">\r\n                                <p>Leaderboard</p>\r\n                            </div>\r\n                            <div className=\"leader-board\">\r\n                                {this.leaderBoardElements()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;","import './Rejected.css';\r\nimport React from 'react';\r\n\r\nclass Rejected extends React.Component {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"rejected-div\">\r\n                <div className=\"rejected-info\">\r\n                    <div className=\"rejected-heading\">\r\n                        <p>Rejected</p>\r\n                    </div>\r\n                    <div className=\"rejected-info-text\">\r\n                        <p>Your request was rejected, please try another room</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rejected;","import \"./Username.css\";\r\nimport React from 'react';\r\nimport ComponentType from \"../Helpers/Helpers\";\r\n\r\ninterface usernameInterface {\r\n    setActiveComponent: (ct: ComponentType)=>void,\r\n    setUsername: (newUsername: string)=>void,\r\n    stopLoader: ()=>void\r\n}\r\n\r\nclass Username extends React.Component<usernameInterface> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submitUsername = this.submitUsername.bind(this);\r\n    }\r\n\r\n    submitUsername() {\r\n        let usernameInputElement = document.querySelector(\".username-input\") as HTMLInputElement;\r\n        let newUsername = usernameInputElement.value;\r\n        this.props.setUsername(newUsername);\r\n        this.props.setActiveComponent(ComponentType.QuizOptions);\r\n        this.props.stopLoader();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"username-div\">\r\n                <div className=\"username-text\">\r\n                    Username\r\n                </div>\r\n                <div className=\"username-enter-div\">\r\n                    <div className=\"username-input-div\">\r\n                        <input type=\"text\" className=\"username-input\" spellCheck=\"false\"/>\r\n                    </div>\r\n                    <div className=\"username-button-div\">\r\n                        <div className=\"username-button\" onClick={this.submitUsername}>\r\n                            Enter Quiz\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Username;","import React from 'react';\r\nimport \"./QuizOptions.css\";\r\nimport ComponentType from \"../Helpers/Helpers\";\r\nimport socketInterface from \"../Interfaces/Interfaces\";\r\n\r\ninterface quizOptionsInterface extends socketInterface {\r\n    setOwner: (ownerStatus: boolean) => void\r\n}\r\n\r\nclass QuizOptions extends React.Component<quizOptionsInterface> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.createRoom = this.createRoom.bind(this);\r\n        this.joinRoom = this.joinRoom.bind(this);\r\n    }\r\n  \r\n\r\n    createRoom() {\r\n        let createRoomPayload = {\r\n            RoomID: this.props.roomId,\r\n            OwnerID: this.props.user\r\n        }\r\n        this.props.socket.send('\"createRoom\"-'+JSON.stringify(createRoomPayload));\r\n        this.props.setActiveComponent(ComponentType.Room);\r\n        this.props.setOwner(true);\r\n    }\r\n  \r\n    joinRoom() {\r\n        let roomIDInput = document.querySelector(\".code-text-input\") as HTMLInputElement;\r\n        let roomID = roomIDInput.value;\r\n        let joinRequest = {\r\n            RoomID: roomID,\r\n            UserID: this.props.user\r\n        }\r\n        this.props.socket.send('\"requestToJoin\"-'+JSON.stringify(joinRequest));\r\n        this.props.setActiveComponent(ComponentType.Loader);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"quiz-options\">\r\n                <div className=\"quiz-select-option-left\">\r\n                    <p className=\"enter-code-p\">Enter Code</p>\r\n                    <input type=\"text\" name=\"code-text\" className=\"code-text-input\" spellCheck=\"false\"/>\r\n                    <div onClick={this.joinRoom} className=\"join-room-button\">Join Room</div>\r\n                </div>\r\n                    <div className=\"vertical-separator\"></div>\r\n                    <div className=\"quiz-select-option-right\" id=\"right-option\">\r\n                    <div onClick={this.createRoom} className=\"create-room-button\">Create Room</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuizOptions;","import React from 'react';\r\nimport \"./JoinRequest.scss\";\r\n\r\ninterface joinReqInterface {\r\n    socket: WebSocket,\r\n    userName: string,\r\n    roomID: string\r\n}\r\n\r\nclass JoinRequest extends React.Component<joinReqInterface> {\r\n\r\n    showRequest = true\r\n\r\n    reqInfo = {\r\n        UserID: this.props.userName,\r\n        RoomID: this.props.roomID\r\n    }\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n        this.acceptRequest = this.acceptRequest.bind(this);\r\n        this.rejectReqeuest = this.rejectReqeuest.bind(this);\r\n    }\r\n\r\n    acceptRequest() {\r\n        this.props.socket.send('\"requestAccepted\"-'+JSON.stringify(this.reqInfo));\r\n        this.showRequest = false;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    rejectReqeuest() {\r\n        this.props.socket.send('\"requestRejected\"-'+JSON.stringify(this.reqInfo));\r\n        this.showRequest = false;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        if (!this.showRequest) return null;\r\n        return(\r\n            <div className=\"notification-div\" id={\"notification-id-\" + this.props.userName}>\r\n                <div className=\"request-user-name\">\r\n                    {this.props.userName}\r\n                </div>\r\n                <div className=\"accept-request-button\" onClick={this.acceptRequest}>\r\n                    <p>Accept</p>\r\n                </div>\r\n                <div className=\"reject-request-button\" onClick={this.rejectReqeuest}>\r\n                    <p>Reject</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default JoinRequest;","import React from 'react';\r\nimport \"./Participant.css\";\r\n\r\ninterface participantInterface {\r\n    name: string\r\n}\r\n\r\nclass JoinRequest extends React.Component<participantInterface> {\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"participant-div\" id={\"participant-id-\" + this.props.name}>\r\n                <div className=\"participant-user-name\">\r\n                    {this.props.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default JoinRequest;","import './App.css';\nimport React from 'react';\nimport hash from \"object-hash\";\nimport Room from \"./components/Room/Room\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Loader from \"./components/Loader/Loader\";\nimport Result from \"./components/Result/Result\";\nimport Rejected from \"./components/Rejected/Rejected\";\nimport Username from \"./components/Username/Username\";\nimport ComponentType from \"./components/Helpers/Helpers\";\nimport QuizOptions from \"./components/QuizOptions/QuizOptions\";\nimport JoinRequest from \"./components/JoinRequest/JoinRequest\";\nimport Participant from \"./components/Participant/Participant\";\n\nclass App extends React.Component {\n\n\tsocket = new WebSocket(\"ws://localhost:8080/webSocket\");\n\tisLoading = false;\n\tactiveComponent = ComponentType.Username;\n\tquestionAndAnswers = [];\n\tnotificationRequests: any[]= [];\n\troomID = hash(Date.now());\n\tuserName = Date.now().toString()\n\towner = false;\n\tresults: any = []\n\tparticipants: any = []\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.stopLoader = this.stopLoader.bind(this);\n\t\tthis.setUsername = this.setUsername.bind(this);\n\t\tthis.startLoader = this.startLoader.bind(this);\n\t\tthis.setOwnerStatus = this.setOwnerStatus.bind(this);\n\t\tthis.setActiveComponent = this.setActiveComponent.bind(this);\n\t}\n\n\tstartLoader() {\n\t\tthis.isLoading = true;\n\t\tthis.forceUpdate();\n\t}\n\n\tstopLoader() {\n\t\tthis.isLoading = false;\n\t\tthis.forceUpdate();\n\t}\n\n\tsetActiveComponent(ac: ComponentType) {\n        this.startLoader();\n\t\tthis.activeComponent = ac;\n\t}\n\n\tsetOwnerStatus(ownerStatus: boolean) {\n\t\tthis.owner = ownerStatus;\n\t}\n\n\tsetUsername(newUsername: string) {\n\t\tthis.userName = newUsername;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.socket.onopen = () => {\n\t\t\tconsole.log(\"Connected to websocket\");\n\t\t\tthis.socket.send(JSON.stringify(\"Hi\"));\n\t\t}\n\n\t\tthis.socket.onmessage = (msg) => {\n\t\t\tconsole.log(msg[\"data\"]);\n\t\t\tlet respJson = JSON.parse(msg[\"data\"])\n\t\t\tif (respJson[\"qAndAReponse\"] !== undefined) {\n\t\t\t\tthis.questionAndAnswers = respJson[\"qAndAReponse\"];\n\t\t\t\tthis.setActiveComponent(ComponentType.Quiz);\n\t\t\t} else if (respJson[\"entryRequest\"] !== undefined) {\n\t\t\t\tthis.notificationRequests.push(<JoinRequest socket={this.socket} roomID={this.roomID}\n\t\t\t\t\t\t\t\t\t\t\t\t\tuserName={respJson[\"entryRequest\"]}/>);\n\t\t\t} else if (respJson[\"entryAccepted\"] !== undefined) {\n\t\t\t\tthis.setActiveComponent(ComponentType.Room);\n\t\t\t\tthis.roomID = respJson[\"entryAccepted\"];\n\t\t\t} else if (respJson[\"results\"] !== undefined) {\n\t\t\t\tthis.results = JSON.parse(JSON.stringify(respJson[\"results\"]));\n\t\t\t\tthis.setActiveComponent(ComponentType.Result);\n\t\t\t} else if (respJson[\"participants\"] !== undefined) {\n\t\t\t\tlet participant = respJson[\"participants\"];\n\t\t\t\tthis.participants.push(<Participant name={participant}/>);\n\t\t\t} else if (respJson == \"entryRejected\") {\n\t\t\t\tthis.setActiveComponent(ComponentType.Rejected);\n\t\t\t}\n\t\t\tthis.stopLoader();\n\t\t}\n\n\t\tthis.socket.onclose = () => {\n\t\t\tconsole.log(\"Socket closed\");\n\t\t}\n\t}\n\n\tcomponentToRender() {\n\t\tif (this.isLoading) return <Loader />\n\t\tswitch(this.activeComponent) {\n\t\t\tcase ComponentType.Username:\n\t\t\t\treturn <Username setActiveComponent={this.setActiveComponent} stopLoader={this.stopLoader}\n\t\t\t\t\t\t\tsetUsername={this.setUsername}/>\n\t\t\tcase ComponentType.QuizOptions:\n\t\t\t\treturn <QuizOptions socket={this.socket} roomId={this.roomID} user={this.userName}\n\t\t\t\t\t\t\tsetActiveComponent={this.setActiveComponent} setOwner={this.setOwnerStatus}/>\n\t\t\tcase ComponentType.Room:\n\t\t\t\treturn <Room socket={this.socket} roomId={this.roomID} user={this.userName}\n\t\t\t\t\t\t\t\tsetActiveComponent={this.setActiveComponent} participants={this.participants}\n\t\t\t\t\t\t\t\trequests={this.notificationRequests} isOwner={this.owner} roomID={this.roomID}/>\n\t\t\tcase ComponentType.Quiz:\n\t\t\t\treturn <Quiz socket={this.socket} roomId={this.roomID}  user={this.userName}\n\t\t\t\t\t\t\tsetActiveComponent={this.setActiveComponent} questionAndAnswers={this.questionAndAnswers}/>\n\t\t\tcase ComponentType.Result:\n\t\t\t\treturn <Result results={this.results} userName={this.userName}/>\n\t\t\tcase ComponentType.Rejected:\n\t\t\t\treturn <Rejected />\n\t\t}\n\t\treturn null;\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{this.componentToRender()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}